spring:
  application:
    name: snac-server

  security:
    oauth2:
      client:
        registration:
          naver:
            client-name: naver
            client-id: oc3WMozq0kSMqHvsLkXJ
            client-secret: kbZO9LP_KD
            redirect-uri: http://localhost:8080/login/oauth2/code/naver
            authorization-grant-type: authorization_code
            scope:


          google:
            client-name: google
            client-id: 22283412297-mtsrmnisn6l7qqtearoh14kda1750n0t.apps.googleusercontent.com
            client-secret: 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
            redirect-uri: http://localhost:8080/login/oauth2/code/google
            authorization-grant-type: authorization_code
            scope: email

        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response




  # 데이터베이스 설정
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true
    open-in-view: false
    show-sql: true

  # Redis 설정
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}

  # AWS SNS 설정
  cloud:
    aws:
      credentials:
        access-key: ${AWS_SNS_ACCESS_KEY}
        secret-key: ${AWS_SNS_SECRET_KEY}
      region:
        static: ${REGION}

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000

  # JWT 설정
  jwt:
    secret: ${JWT_SECRET_KEY}

  # RabbitMQ 설정
    rabbitmq:
      addresses: ${RABBITMQ_ADDRESSES}
      username: ${RABBITMQ_USERNAME}
      password: ${RABBITMQ_PASSWORD}

# Swagger UI (springdoc) 설정
springdoc:
  swagger-ui:
    path: /swagger-ui.html
    with-credentials: true
    oauth2-redirect-url: /swagger-ui/oauth2-redirect.html

# 결제 (Toss) 설정
payments:
  toss:
    secret-key: ${TOSS_SECRET_KEY}
    confirm-url: "https://api.tosspayments.com/v1/payments/confirm"
    success-url: ${PAYMENT_SUCCESS_URL}
    fail-url: ${PAYMENT_FAIL_URL}

# AES 암호화 설정
aes:
  passphrase: ${AES_PASSPHRASE}
  salt: ${AES_SALT}

logging:
  level:
    com.ureca.snac.auth.config.SecurityConfig: DEBUG