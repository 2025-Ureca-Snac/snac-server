spring:
  application:
    name: snac-server

  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 30MB

  security:
    oauth2:
      client:
        registration:
          naver:
            client-name: naver
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: ${NAVER_REDIRECT_URI}
            
            authorization-grant-type: authorization_code
            scope:


          google:
            client-name: google
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: ${GOOGLE_REDIRECT_URI}

            authorization-grant-type: authorization_code
            scope: email


          kakao:
            client-name: kakao
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: ${KAKAO_REDIRECT_URI}

            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope:


        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

  # 데이터베이스 설정
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: false
    open-in-view: false
    show-sql: false

  # Redis 설정
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}

  # AWS SNS 설정
  cloud:
    aws:
      credentials:
        access-key: ${AWS_SNS_ACCESS_KEY}
        secret-key: ${AWS_SNS_SECRET_KEY}
      region:
        static: ${REGION}

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000

  # JWT 설정
  jwt:
    secret: ${JWT_SECRET_KEY}
    access-expiration: 900000
    #15분
    refresh-expiration: 43200000
    #12시간
    social-expiration: 60000
    #1분

  # RabbitMQ 설정

  rabbitmq:
    host: ${RABBITMQ_HOST}
    port: ${RABBITMQ_PORT}
    username: ${RABBITMQ_USERNAME}
    password: ${RABBITMQ_PASSWORD}


# CORS 외부화 설정
cors:
  allowed-origins:
    - http://localhost:3000
    - http://localhost:5500
    - http://127.0.0.1:5500
    - http://127.0.0.1:3000
    - https://docs.tosspayments.com
    - https://snac-app.com
    - https://www.snac-app.com
    - https://api.snac-app.com
    - https://develop.df83wi2m9axuw.amplifyapp.com
    - https://seungwoo.i234.me
    - https://kapi.kakao.com
  allowed-methods:
    - GET
    - POST
    - PUT
    - PATCH
    - DELETE
    - OPTIONS
  allowed-headers: ["*"]
  exposed-headers: ["Authorization"]
  allow-credentials: true

kakao:
  admin-key: ${KAKAO_ADMIN_KEY}


# Swagger UI (springdoc) 설정
springdoc:
  swagger-ui:
    path: /swagger-ui.html
    with-credentials: true
    oauth2-redirect-url: /swagger-ui/oauth2-redirect.html

# 결제 (Toss) 설정
payments:
  toss:
    url: "https://api.tosspayments.com/"
    success-url: ${PAYMENT_SUCCESS_URL}
    fail-url: ${PAYMENT_FAIL_URL}
    secret-key: ${TOSS_SECRET_KEY}

# AES 암호화 설정
aes:
  passphrase: ${AES_PASSPHRASE}
  salt: ${AES_SALT}


logging:
  level:
    com.ureca.snac.auth.config.SecurityConfig: DEBUG

# s3
aws:
  s3:
    region: ap-northeast-2
    bucket: snac-static
    access-key: ${AWS_ACCESS_KEY_ID}
    secret-key: ${AWS_SECRET_ACCESS_KEY}
    attachment-dir: trade/attachments/

custom:
  stomp:
    host: ${STOMP_HOST}
    port: ${STOMP_PORT}
    client-login: ${STOMP_CLIENT_LOGIN}
    client-passcode: ${STOMP_CLIENT_PASS}
    system-login: ${STOMP_SYSTEM_LOGIN}
    system-passcode: ${STOMP_SYSTEM_PASS}

shedlock:
  namespace: ${SHEDLOCK_NAMESPACE}
